//FUNCIONA, Falta revisar y subir lo demas :)
package vista;

import modelo.*;
import persistencia.GestorArchivos;
import excepciones.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Map;

public class VentanaPrincipal extends JFrame implements ActionListener {
    private Inmobiliaria inmobiliaria;
    
    // Botones principales
    private JButton btnVerDepartamentos;
    private JButton btnConsultarDepto;
    private JButton btnComprarDepto;
    private JButton btnBuscar;
    private JButton btnFiltrar;
    private JButton btnProyectos;
    private JButton btnReportes;
    private JButton btnSalir;
    
    public VentanaPrincipal() {
        inmobiliaria = new Inmobiliaria("Mi Inmobiliaria");
        cargarDatosIniciales();
        crearInterfaz();
        
        // Cargar datos existentes
        GestorArchivos.cargarDatos(inmobiliaria);
    }
    
    private void cargarDatosIniciales() {
        // Proyectos de ejemplo
        Proyecto p1 = new Proyecto("P001", "Torre Central", "Centro");
        Proyecto p2 = new Proyecto("P002", "Jardines Norte", "Norte");
        
        // Departamentos de ejemplo
        p1.agregarDepartamento(new Departamento(101, 250000));
        p1.agregarDepartamento(new Departamento(102, 350000));
        p2.agregarDepartamento(new Departamento(201, 280000));
        p2.agregarDepartamento(new Departamento(202, 320000));
        
        inmobiliaria.agregarProyecto("P001", p1);
        inmobiliaria.agregarProyecto("P002", p2);
        
        // Clientes de ejemplo
        Cliente c1 = new Cliente("11111111-1", "Juan Perez", "12345678");
        Cliente c2 = new Cliente("22222222-2", "Maria Garcia", "87654321");
        inmobiliaria.agregarCliente("11111111-1", c1);
        inmobiliaria.agregarCliente("22222222-2", c2);
    }
    
    private void crearInterfaz() {
        // Configuracion basica de la ventana
        setTitle("Sistema Inmobiliario");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());
        
        // Panel superior con titulo
        JPanel panelTitulo = new JPanel();
        panelTitulo.setBackground(new Color(70, 130, 180));
        JLabel titulo = new JLabel("SISTEMA INMOBILIARIO");
        titulo.setFont(new Font("Arial", Font.BOLD, 24));
        titulo.setForeground(Color.WHITE);
        titulo.setHorizontalAlignment(SwingConstants.CENTER);
        panelTitulo.add(titulo);
        add(panelTitulo, BorderLayout.NORTH);
        
        // Panel central con botones
        JPanel panelCentral = new JPanel();
        panelCentral.setLayout(new GridLayout(4, 2, 10, 10));
        panelCentral.setBorder(BorderFactory.createEmptyBorder(30, 50, 30, 50));
        panelCentral.setBackground(Color.WHITE);
        
        // Crear botones
        btnVerDepartamentos = new JButton("Ver Departamentos");
        btnConsultarDepto = new JButton("Consultar Departamento");
        btnComprarDepto = new JButton("Comprar Departamento");
        btnBuscar = new JButton("Buscar Departamento");
        btnFiltrar = new JButton("Filtrar por Precio");
        btnProyectos = new JButton("Gestionar Proyectos");
        btnReportes = new JButton("Ver Reportes");
        btnSalir = new JButton("Salir");
        
        // Configurar botones
        configurarBoton(btnVerDepartamentos, new Color(70, 130, 180));
        configurarBoton(btnConsultarDepto, new Color(255, 140, 0));
        configurarBoton(btnComprarDepto, new Color(220, 20, 60));
        configurarBoton(btnBuscar, new Color(147, 112, 219));
        configurarBoton(btnFiltrar, new Color(32, 178, 170));
        configurarBoton(btnProyectos, new Color(60, 179, 113));
        configurarBoton(btnReportes, new Color(255, 99, 71));
        configurarBoton(btnSalir, new Color(105, 105, 105));
        
        // Agregar eventos
        btnVerDepartamentos.addActionListener(this);
        btnConsultarDepto.addActionListener(this);
        btnComprarDepto.addActionListener(this);
        btnBuscar.addActionListener(this);
        btnFiltrar.addActionListener(this);
        btnProyectos.addActionListener(this);
        btnReportes.addActionListener(this);
        btnSalir.addActionListener(this);
        
        // Agregar botones al panel
        panelCentral.add(btnVerDepartamentos);
        panelCentral.add(btnConsultarDepto);
        panelCentral.add(btnComprarDepto);
        panelCentral.add(btnBuscar);
        panelCentral.add(btnFiltrar);
        panelCentral.add(btnProyectos);
        panelCentral.add(btnReportes);
        panelCentral.add(btnSalir);
        
        add(panelCentral, BorderLayout.CENTER);
        
        // Panel inferior con informacion
        JPanel panelInferior = new JPanel();
        panelInferior.setBackground(new Color(240, 240, 240));
        JLabel info = new JLabel("Sistema listo para usar");
        info.setFont(new Font("Arial", Font.ITALIC, 12));
        panelInferior.add(info);
        add(panelInferior, BorderLayout.SOUTH);
    }
    
    private void configurarBoton(JButton boton, Color color) {
        boton.setFont(new Font("Arial", Font.BOLD, 14));
        boton.setBackground(color);
        boton.setForeground(Color.WHITE);
        boton.setPreferredSize(new Dimension(200, 50));
        boton.setFocusPainted(false);
        boton.setBorder(BorderFactory.createRaisedBevelBorder());
    }
    
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnVerDepartamentos) {
            mostrarDepartamentos();
        } else if (e.getSource() == btnConsultarDepto) {
            consultarDepartamento();
        } else if (e.getSource() == btnComprarDepto) {
            comprarDepartamento();
        } else if (e.getSource() == btnBuscar) {
            buscarDepartamento();
        } else if (e.getSource() == btnFiltrar) {
            filtrarDepartamentos();
        } else if (e.getSource() == btnProyectos) {
            gestionarProyectos();
        } else if (e.getSource() == btnReportes) {
            mostrarReportes();
        } else if (e.getSource() == btnSalir) {
            salir();
        }
    }
    
    private void mostrarDepartamentos() {
        StringBuilder texto = new StringBuilder();
        texto.append("LISTA DE DEPARTAMENTOS\n\n");
        
        // Verificar si hay proyectos
        if (inmobiliaria.getProyectos().isEmpty()) {
            texto.append("No hay proyectos registrados en el sistema.\n");
        } else {
            // Mostrar cada proyecto
            for (Proyecto proyecto : inmobiliaria.getProyectos().values()) {
                texto.append("PROYECTO: ").append(proyecto.getNombre()).append("\n");
                texto.append("Ubicacion: ").append(proyecto.getUbicacion()).append("\n");
                texto.append("Codigo: ").append(proyecto.getCodigo()).append("\n\n");
                
                // Verificar si el proyecto tiene departamentos
                if (proyecto.getDepartamentos().isEmpty()) {
                    texto.append("  Este proyecto no tiene departamentos registrados.\n\n");
                } else {
                    // Mostrar cada departamento
                    for (Departamento depto : proyecto.getDepartamentos()) {
                        String estado = depto.isVendido() ? "VENDIDO" : "DISPONIBLE";
                        texto.append("  Depto ").append(depto.getNumero())
                             .append(" - $").append(String.format("%.0f", depto.getPrecioBase()))
                             .append(" - ").append(estado)
                             .append(" - Consultas: ").append(depto.getContadorConsultas())
                             .append("\n");
                    }
                    texto.append("\n");
                }
            }
        }
        
        // Agregar informacion de resumen
        texto.append("RESUMEN:\n");
        texto.append("Total proyectos: ").append(inmobiliaria.getProyectos().size()).append("\n");
        
        int totalDeptos = 0;
        for (Proyecto p : inmobiliaria.getProyectos().values()) {
            totalDeptos += p.getDepartamentos().size();
        }
        texto.append("Total departamentos: ").append(totalDeptos).append("\n");
        
        mostrarTexto("Departamentos", texto.toString());
    }
    
    private void consultarDepartamento() {
        String numeroStr = JOptionPane.showInputDialog(this, "Ingrese numero del departamento:");
        
        if (numeroStr == null || numeroStr.trim().isEmpty()) return;
        
        try {
            int numero = Integer.parseInt(numeroStr);
            Departamento depto = inmobiliaria.buscarDepartamentoPorNumero(numero);
            
            if (depto == null) {
                JOptionPane.showMessageDialog(this, "Departamento no encontrado");
                return;
            }
            
            if (depto.isVendido()) {
                JOptionPane.showMessageDialog(this, "El departamento ya esta vendido");
                return;
            }
            
            // Registrar consulta
            depto.registrarConsulta();
            
            String info = "INFORMACION DEL DEPARTAMENTO\n\n" +
                         "Numero: " + depto.getNumero() + "\n" +
                         "Precio base: $" + depto.getPrecioBase() + "\n" +
                         "Precio actual: $" + String.format("%.2f", depto.getPrecioActual()) + "\n" +
                         "Factor demanda: " + depto.getFactorDemanda() + "x\n" +
                         "Consultas totales: " + depto.getContadorConsultas() + "\n" +
                         "Estado: DISPONIBLE\n\n" +
                         "Consulta registrada exitosamente!";
            
            JOptionPane.showMessageDialog(this, info);
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un numero valido");
        }
    }
    
    private void comprarDepartamento() {
        String numeroStr = JOptionPane.showInputDialog(this, "Ingrese numero del departamento a comprar:");
        
        if (numeroStr == null || numeroStr.trim().isEmpty()) return;
        
        try {
            int numero = Integer.parseInt(numeroStr);
            Departamento depto = inmobiliaria.buscarDepartamentoPorNumero(numero);
            
            if (depto == null) {
                JOptionPane.showMessageDialog(this, "Departamento no encontrado");
                return;
            }
            
            if (depto.isVendido()) {
                JOptionPane.showMessageDialog(this, "El departamento ya esta vendido");
                return;
            }
            
            // Mostrar informacion del departamento
            String info = "DEPARTAMENTO SELECCIONADO\n\n" +
                         "Numero: " + depto.getNumero() + "\n" +
                         "Precio actual: $" + String.format("%.2f", depto.getPrecioActual());
            
            int confirmar = JOptionPane.showConfirmDialog(this, 
                info + "\n\nDesea continuar con la compra?", 
                "Confirmar", 
                JOptionPane.YES_NO_OPTION);
            
            if (confirmar != JOptionPane.YES_OPTION) return;
            
            // Datos del cliente
            String rut = JOptionPane.showInputDialog(this, "RUT del cliente:");
            if (rut == null || rut.trim().isEmpty()) return;
            
            Cliente cliente = inmobiliaria.buscarCliente(rut);
            if (cliente == null) {
                String nombre = JOptionPane.showInputDialog(this, "Nombre del cliente:");
                String telefono = JOptionPane.showInputDialog(this, "Telefono del cliente:");
                
                if (nombre == null || telefono == null || nombre.trim().isEmpty() || telefono.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Datos incompletos");
                    return;
                }
                
                cliente = new Cliente(rut, nombre, telefono);
                inmobiliaria.agregarCliente(rut, cliente);
            }
            
            // Confirmar venta final
            String confirmacion = "CONFIRMAR VENTA\n\n" +
                                 "Departamento: " + depto.getNumero() + "\n" +
                                 "Cliente: " + cliente.getNombre() + "\n" +
                                 "Precio: $" + String.format("%.2f", depto.getPrecioActual()) + "\n\n" +
                                 "Confirmar venta?";
            
            int venta = JOptionPane.showConfirmDialog(this, confirmacion, "Confirmar Venta", JOptionPane.YES_NO_OPTION);
            
            if (venta == JOptionPane.YES_OPTION) {
                double precioVenta = depto.getPrecioActual();
                Venta ventaObj = new Venta(depto, cliente, precioVenta);
                inmobiliaria.registrarVenta(ventaObj);
                
                JOptionPane.showMessageDialog(this, 
                    "VENTA REALIZADA\n\n" +
                    "Departamento " + depto.getNumero() + " vendido a " + cliente.getNombre() + "\n" +
                    "Precio final: $" + String.format("%.2f", precioVenta) + "\n" +
                    "ID Venta: " + ventaObj.getId());
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un numero valido");
        }
    }
    
    private void buscarDepartamento() {
        String numeroStr = JOptionPane.showInputDialog(this, "Ingrese numero del departamento a buscar:");
        
        if (numeroStr == null || numeroStr.trim().isEmpty()) return;
        
        try {
            int numero = Integer.parseInt(numeroStr);
            Departamento depto = inmobiliaria.buscarDepartamentoPorNumero(numero);
            
            if (depto != null) {
                String estado = depto.isVendido() ? "VENDIDO" : "DISPONIBLE";
                String info = "DEPARTAMENTO ENCONTRADO\n\n" +
                             depto.toString() + "\n" +
                             "Estado: " + estado;
                JOptionPane.showMessageDialog(this, info);
            } else {
                JOptionPane.showMessageDialog(this, "Departamento no encontrado");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un numero valido");
        }
    }
    
    private void filtrarDepartamentos() {
        String precioStr = JOptionPane.showInputDialog(this, "Ingrese precio maximo:");
        
        if (precioStr == null || precioStr.trim().isEmpty()) return;
        
        try {
            double precioMax = Double.parseDouble(precioStr);
            StringBuilder resultado = new StringBuilder();
            resultado.append("DEPARTAMENTOS DISPONIBLES\n");
            resultado.append("Precio maximo: $").append(precioMax).append("\n\n");
            
            int contador = 0;
            for (Proyecto proyecto : inmobiliaria.getProyectos().values()) {
                for (Departamento depto : proyecto.getDepartamentos()) {
                    if (!depto.isVendido() && depto.getPrecioBase() <= precioMax) {
                        resultado.append(proyecto.getNombre())
                                .append(" - Depto ").append(depto.getNumero())
                                .append(" - $").append(depto.getPrecioBase()).append("\n");
                        contador++;
                    }
                }
            }
            
            if (contador == 0) {
                resultado.append("No se encontraron departamentos en ese rango de precio");
            } else {
                resultado.append("\nTotal encontrados: ").append(contador);
            }
            
            mostrarTexto("Filtro por Precio", resultado.toString());
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un precio valido");
        }
    }
    
    private void gestionarProyectos() {
        String[] opciones = {"Agregar Proyecto", "Agregar Departamento", "Ver Proyectos", "Guardar Datos", "Cancelar"};
        int opcion = JOptionPane.showOptionDialog(this,
            "Que desea hacer?",
            "Gestion de Proyectos",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            opciones,
            opciones[0]);
        
        switch (opcion) {
            case 0: // Agregar Proyecto
                agregarProyecto();
                break;
            case 1: // Agregar Departamento
                agregarDepartamento();
                break;
            case 2: // Ver Proyectos
                verProyectos();
                break;
            case 3: // Guardar Datos
                guardarDatos();
                break;
        }
    }
    
    private void guardarDatos() {
        try {
            GestorArchivos.guardarDatos(inmobiliaria);
            JOptionPane.showMessageDialog(this, "Datos guardados exitosamente");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error al guardar los datos: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void agregarProyecto() {
        String codigo = JOptionPane.showInputDialog(this, "Codigo del proyecto:");
        if (codigo == null || codigo.trim().isEmpty()) return;
        
        String nombre = JOptionPane.showInputDialog(this, "Nombre del proyecto:");
        if (nombre == null || nombre.trim().isEmpty()) return;
        
        String ubicacion = JOptionPane.showInputDialog(this, "Ubicacion del proyecto:");
        if (ubicacion == null || ubicacion.trim().isEmpty()) return;
        
        if (inmobiliaria.getProyectos().containsKey(codigo)) {
            JOptionPane.showMessageDialog(this, "Ya existe un proyecto con ese codigo");
            return;
        }
        
        Proyecto proyecto = new Proyecto(codigo, nombre, ubicacion);
        inmobiliaria.agregarProyecto(codigo, proyecto);
        JOptionPane.showMessageDialog(this, "Proyecto agregado exitosamente");
    }
    
    private void agregarDepartamento() {
        if (inmobiliaria.getProyectos().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Primero debe crear un proyecto");
            return;
        }
        
        // Mostrar proyectos disponibles
        StringBuilder proyectosDisponibles = new StringBuilder("Proyectos disponibles:\n");
        for (Proyecto p : inmobiliaria.getProyectos().values()) {
            proyectosDisponibles.append(p.getCodigo()).append(" - ").append(p.getNombre()).append("\n");
        }
        
        String codigo = JOptionPane.showInputDialog(this, proyectosDisponibles.toString() + "\nIngrese codigo del proyecto:");
        if (codigo == null || codigo.trim().isEmpty()) return;
        
        Proyecto proyecto = inmobiliaria.getProyectos().get(codigo);
        if (proyecto == null) {
            JOptionPane.showMessageDialog(this, "Proyecto no encontrado");
            return;
        }
        
        try {
            String numeroStr = JOptionPane.showInputDialog(this, "Numero del departamento:");
            int numero = Integer.parseInt(numeroStr);
            
            String precioStr = JOptionPane.showInputDialog(this, "Precio del departamento:");
            double precio = Double.parseDouble(precioStr);
            
            if (proyecto.buscarDepartamento(numero) != null) {
                JOptionPane.showMessageDialog(this, "Ya existe un departamento con ese numero");
                return;
            }
            
            Departamento depto = new Departamento(numero, precio);
            proyecto.agregarDepartamento(depto);
            JOptionPane.showMessageDialog(this, "Departamento agregado exitosamente");
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valores numericos no validos");
        }
    }
    
    private void verProyectos() {
        StringBuilder texto = new StringBuilder();
        texto.append("PROYECTOS REGISTRADOS\n\n");
        
        for (Proyecto proyecto : inmobiliaria.getProyectos().values()) {
            texto.append("PROYECTO: ").append(proyecto.getNombre()).append("\n");
            texto.append("Codigo: ").append(proyecto.getCodigo()).append("\n");
            texto.append("Ubicacion: ").append(proyecto.getUbicacion()).append("\n");
            texto.append("Total departamentos: ").append(proyecto.getTotalDepartamentos()).append("\n");
            texto.append("Departamentos vendidos: ").append(proyecto.getDepartamentosVendidos()).append("\n\n");
        }
        
        mostrarTexto("Proyectos", texto.toString());
    }
    
    private void mostrarReportes() {
        StringBuilder reporte = new StringBuilder();
        reporte.append("REPORTE GENERAL\n\n");
        reporte.append("Total proyectos: ").append(inmobiliaria.getProyectos().size()).append("\n");
        reporte.append("Total ventas: ").append(inmobiliaria.getVentas().size()).append("\n\n");
        
        for (Proyecto proyecto : inmobiliaria.getProyectos().values()) {
            reporte.append("PROYECTO: ").append(proyecto.getNombre()).append("\n");
            reporte.append("Ubicacion: ").append(proyecto.getUbicacion()).append("\n");
            reporte.append("Departamentos: ").append(proyecto.getTotalDepartamentos()).append("\n");
            reporte.append("Vendidos: ").append(proyecto.getDepartamentosVendidos()).append("\n");
            reporte.append("Porcentaje vendido: ").append(String.format("%.1f", proyecto.getPorcentajeVendido())).append("%\n");
            reporte.append("Demanda promedio: ").append(String.format("%.1f", proyecto.getDemandaPromedio())).append("\n\n");
        }
        
        mostrarTexto("Reporte General", reporte.toString());
    }
    
    private void mostrarTexto(String titulo, String texto) {
        JDialog ventana = new JDialog(this, titulo, true);
        ventana.setSize(600, 500);
        ventana.setLocationRelativeTo(this);
        
        JTextArea area = new JTextArea(texto);
        area.setFont(new Font("Monospaced", Font.PLAIN, 12));
        area.setEditable(false);
        
        JScrollPane scroll = new JScrollPane(area);
        scroll.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        JButton btnCerrar = new JButton("Cerrar");
        btnCerrar.addActionListener(e -> ventana.dispose());
        
        JPanel panelBoton = new JPanel();
        panelBoton.add(btnCerrar);
        
        ventana.add(scroll, BorderLayout.CENTER);
        ventana.add(panelBoton, BorderLayout.SOUTH);
        ventana.setVisible(true);
    }
    
    private void salir() {
        int respuesta = JOptionPane.showConfirmDialog(this, 
            "Esta seguro que desea salir?\nSe guardaran todos los datos automaticamente.", 
            "Confirmar Salida", 
            JOptionPane.YES_NO_OPTION);
        
        if (respuesta == JOptionPane.YES_OPTION) {
            try {
                GestorArchivos.guardarDatos(inmobiliaria);
                System.out.println("Datos guardados exitosamente");
                System.exit(0);
            } catch (Exception e) {
                System.out.println("Error al guardar: " + e.getMessage());
                int continuar = JOptionPane.showConfirmDialog(this,
                    "Error al guardar los datos. Desea salir sin guardar?",
                    "Error de Guardado",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
                if (continuar == JOptionPane.YES_OPTION) {
                    System.exit(0);
                }
            }
        }
    }
    
    public static void main(String[] args) {
        VentanaPrincipal ventana = new VentanaPrincipal();
        ventana.setVisible(true);
    }
}

                

